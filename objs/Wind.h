//==============================================================//
// Copyright (C) 1997-1998, California Institute of Technology.	//
// U.S. Government sponsorship acknowledged.					//
//==============================================================//

#ifndef WIND_H
#define WIND_H

static const char rcs_id_wind_h[] =
	"@(#) $Id$";

#include <stdio.h>
#include "Misc.h"
#include "List.h"
#include "LonLat.h"
#include "Index.h"

//======================================================================
// CLASSES
//		WindVector, WindVectorPlus, WVC, WindField, WindSwath
//======================================================================

//======================================================================
// CLASS
//		WindVector
//
// DESCRIPTION
//		The WindVector object represents a wind vector (speed and
//		direction).  The wind direction is counter-clockwise from East.
//======================================================================

class WindVector
{
public:

	//--------------//
	// construction //
	//--------------//

	WindVector();
	~WindVector();

	//---------//
	// setting //
	//---------//

	int		SetSpdDir(float speed, float direction);
	int		SetUV(float u, float v);
	int		GetUV(float* u, float* v);

	//-----------//
	// variables //
	//-----------//

	float		spd;
	float		dir;
};

//======================================================================
// CLASS
//		WindVectorPlus
//
// DESCRIPTION
//		The WindVectorPlus object is subclassed from a WindVector and
//		contains additional information generated by the wind
//		retrieval processing.
//======================================================================

class WindVectorPlus : public WindVector
{
public:

	//--------------//
	// construction //
	//--------------//

	WindVectorPlus();
	~WindVectorPlus();

	//--------------//
	// input/output //
	//--------------//

	int		WriteL20(FILE* fp);
	int		WriteAscii(FILE* fp);
	int		ReadL20(FILE* fp);

	//-----------//
	// variables //
	//-----------//

	float		obj;		// the objective function value
};

//======================================================================
// CLASS
//		WVC
//
// DESCRIPTION
//		The WVC object represents a wind vector cell.  It contains
//		a list of ambiguous solution WindVectorPlus.
//======================================================================

class WVC
{
public:

	//--------------//
	// construction //
	//--------------//

	WVC();
	~WVC();

	//--------------//
	// input/output //
	//--------------//

	int		WriteL20(FILE* fp);
	int		ReadL20(FILE* fp);
	int		WriteVctr(FILE* fp, const int rank);		// 0 = selected
	int		WriteAscii(FILE* fp);

	//--------------//
	// manipulation //
	//--------------//

	int					RemoveDuplicates();
	int					SortByObj();
	WindVectorPlus*		GetNearestToDirection(float dir);

	//---------//
	// freeing //
	//---------//

	void				FreeContents();

	//-----------//
	// variables //
	//-----------//

	LonLat					lonLat;
	WindVectorPlus*			selected;
	List<WindVectorPlus>	ambiguities;
};

//======================================================================
// CLASS
//		WindField
//
// DESCRIPTION
//		The WindField object hold a non-ambiguous wind field.
//======================================================================

#define VAP_LON_DIM				360
#define VAP_LAT_DIM				121
#define VAP_TYPE				"VAP"

#define ECMWF_HIRES_LON_DIM		640
#define ECMWF_HIRES_LAT_DIM		321
#define ECMWF_HIRES_TYPE		"ECMWF"

class WindField
{
public:

	//--------------//
	// construction //
	//--------------//

	WindField();
	~WindField();

	//--------------//
	// input/output //
	//--------------//

	int		ReadVap(const char* filename);
	int		ReadEcmwfHiRes(const char* filename);
	int		ReadType(const char* filename, const char* type);
	int		WriteVctr(const char* filename);

	int		NewRes(WindField* windfield, float lon_res, float lat_res);

	//--------//
	// access //
	//--------//

	int		NearestWindVector(LonLat lon_lat, WindVector* wv);
	int		InterpolatedWindVector(LonLat lon_lat, WindVector* wv);

protected:

	//--------------//
	// construction //
	//--------------//

	int		_Allocate();
	int		_Deallocate();

	//-----------//
	// variables //
	//-----------//

	Index		_lon;
	Index		_lat;

	int			_wrap;		// flag for longitude wrapping

	WindVector***	_field;
};

//======================================================================
// CLASS
//		WindSwath
//
// DESCRIPTION
//		The WindSwath object hold an ambiguous wind field gridded in
//		along track and cross track.
//======================================================================

class WindSwath
{
public:

	//--------------//
	// construction //
	//--------------//

	WindSwath();
	~WindSwath();

	int		Allocate(int cross_track_bins, int along_track_bins);

	//----------//
	// building //
	//----------//

	int		Add(int cti, int ati, WVC* wvc);

	//---------------------//
	// setting and getting //
	//---------------------//

	int		GetCrossTrackBins()		{ return(_crossTrackBins); };

	//---------//
	// freeing //
	//---------//

	int		DeleteWVCs();
	int		DeleteEntireSwath();

	//--------------//
	// input/output //
	//--------------//

	int		WriteL20(FILE* fp);
	int		ReadL20(FILE* fp);
	int		ReadL20(const char* filename);
	int		WriteVctr(const char* filename, const int rank);

	//-----------//
	// filtering //
	//-----------//

	int		InitWithRank(int rank);
	int		MedianFilter(int window_size, int max_passes);
	int		MedianFilterPass(int half_window, WindVectorPlus*** selected,
				char** change);

	//------------//
	// evaluation //
	//------------//

	int		CtdArray(float cross_track_res, float* ctd_array);

	float	RmsSpdErr(WindField* truth);
	float	RmsDirErr(WindField* truth);
	float	Skill(WindField* truth);
	float	SpdBias(WindField* truth);

	int		RmsSpdErrVsCti(WindField* truth, float* rms_spd_err_array,
				int* count_array, float low_speed, float high_speed);
	int		RmsDirErrVsCti(WindField* truth, float* rms_dir_err_array,
				int* count_array, float low_speed, float high_speed);
	int		SkillVsCti(WindField* truth, float* skill_array,
				int* count_array, float low_speed, float high_speed);
	int		SpdBiasVsCti(WindField* truth, float* spd_bias_array,
				int* count_array, float low_speed, float high_speed);

	//-----------//
	// variables //
	//-----------//

	WVC***		swath;

protected:

	//--------------//
	// construction //
	//--------------//

	int		_Allocate();
	int		_Deallocate();

	//-----------//
	// variables //
	//-----------//

	int		_crossTrackBins;
	int		_alongTrackBins;
	int		_validCells;
};

#endif
